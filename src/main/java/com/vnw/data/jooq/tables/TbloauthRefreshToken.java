/**
 * This class is generated by jOOQ
 */
package com.vnw.data.jooq.tables;


import com.vnw.data.jooq.Keys;
import com.vnw.data.jooq.VnwCore;
import com.vnw.data.jooq.tables.records.TbloauthRefreshTokenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbloauthRefreshToken extends TableImpl<TbloauthRefreshTokenRecord> {

    private static final long serialVersionUID = 804783057;

    /**
     * The reference instance of <code>vnw_core.tbloauth_refresh_token</code>
     */
    public static final TbloauthRefreshToken TBLOAUTH_REFRESH_TOKEN = new TbloauthRefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbloauthRefreshTokenRecord> getRecordType() {
        return TbloauthRefreshTokenRecord.class;
    }

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.id</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.client_id</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.user_id</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.token</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.expires_at</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, Integer> EXPIRES_AT = createField("expires_at", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vnw_core.tbloauth_refresh_token.scope</code>.
     */
    public final TableField<TbloauthRefreshTokenRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>vnw_core.tbloauth_refresh_token</code> table reference
     */
    public TbloauthRefreshToken() {
        this("tbloauth_refresh_token", null);
    }

    /**
     * Create an aliased <code>vnw_core.tbloauth_refresh_token</code> table reference
     */
    public TbloauthRefreshToken(String alias) {
        this(alias, TBLOAUTH_REFRESH_TOKEN);
    }

    private TbloauthRefreshToken(String alias, Table<TbloauthRefreshTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbloauthRefreshToken(String alias, Table<TbloauthRefreshTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return VnwCore.VNW_CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TbloauthRefreshTokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TBLOAUTH_REFRESH_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TbloauthRefreshTokenRecord> getPrimaryKey() {
        return Keys.KEY_TBLOAUTH_REFRESH_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TbloauthRefreshTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TbloauthRefreshTokenRecord>>asList(Keys.KEY_TBLOAUTH_REFRESH_TOKEN_PRIMARY, Keys.KEY_TBLOAUTH_REFRESH_TOKEN_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbloauthRefreshToken as(String alias) {
        return new TbloauthRefreshToken(alias, this);
    }

    /**
     * Rename this table
     */
    public TbloauthRefreshToken rename(String name) {
        return new TbloauthRefreshToken(name, null);
    }
}
