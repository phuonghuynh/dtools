/**
 * This class is generated by jOOQ
 */
package com.vnw.data.jooq.tables;


import com.vnw.data.jooq.Keys;
import com.vnw.data.jooq.VnwCore;
import com.vnw.data.jooq.tables.records.TblscreenTestQuestionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblscreenTestQuestion extends TableImpl<TblscreenTestQuestionRecord> {

    private static final long serialVersionUID = -684667186;

    /**
     * The reference instance of <code>vnw_core.tblscreen_test_question</code>
     */
    public static final TblscreenTestQuestion TBLSCREEN_TEST_QUESTION = new TblscreenTestQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TblscreenTestQuestionRecord> getRecordType() {
        return TblscreenTestQuestionRecord.class;
    }

    /**
     * The column <code>vnw_core.tblscreen_test_question.testId</code>.
     */
    public final TableField<TblscreenTestQuestionRecord, UInteger> TESTID = createField("testId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>vnw_core.tblscreen_test_question.questionId</code>. id of question, uniqe in a test
     */
    public final TableField<TblscreenTestQuestionRecord, UInteger> QUESTIONID = createField("questionId", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "id of question, uniqe in a test");

    /**
     * The column <code>vnw_core.tblscreen_test_question.questionOrder</code>. order of question in a test
     */
    public final TableField<TblscreenTestQuestionRecord, UByte> QUESTIONORDER = createField("questionOrder", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "order of question in a test");

    /**
     * The column <code>vnw_core.tblscreen_test_question.questionType</code>.  1: multichoice 2: free text
     */
    public final TableField<TblscreenTestQuestionRecord, UByte> QUESTIONTYPE = createField("questionType", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, " 1: multichoice 2: free text");

    /**
     * The column <code>vnw_core.tblscreen_test_question.content</code>. question content
     */
    public final TableField<TblscreenTestQuestionRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false), this, "question content");

    /**
     * The column <code>vnw_core.tblscreen_test_question.correctOptionId</code>. 0: none -> not scored question; >0: is scored question and the correct optionId is this number
     */
    public final TableField<TblscreenTestQuestionRecord, UByte> CORRECTOPTIONID = createField("correctOptionId", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "0: none -> not scored question; >0: is scored question and the correct optionId is this number");

    /**
     * The column <code>vnw_core.tblscreen_test_question.score</code>. question score
     */
    public final TableField<TblscreenTestQuestionRecord, Byte> SCORE = createField("score", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "question score");

    /**
     * Create a <code>vnw_core.tblscreen_test_question</code> table reference
     */
    public TblscreenTestQuestion() {
        this("tblscreen_test_question", null);
    }

    /**
     * Create an aliased <code>vnw_core.tblscreen_test_question</code> table reference
     */
    public TblscreenTestQuestion(String alias) {
        this(alias, TBLSCREEN_TEST_QUESTION);
    }

    private TblscreenTestQuestion(String alias, Table<TblscreenTestQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TblscreenTestQuestion(String alias, Table<TblscreenTestQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return VnwCore.VNW_CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TblscreenTestQuestionRecord> getPrimaryKey() {
        return Keys.KEY_TBLSCREEN_TEST_QUESTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TblscreenTestQuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<TblscreenTestQuestionRecord>>asList(Keys.KEY_TBLSCREEN_TEST_QUESTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TblscreenTestQuestion as(String alias) {
        return new TblscreenTestQuestion(alias, this);
    }

    /**
     * Rename this table
     */
    public TblscreenTestQuestion rename(String name) {
        return new TblscreenTestQuestion(name, null);
    }
}
